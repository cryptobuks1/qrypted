/* QryptoPP 2016
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** CryptoPP 5.6.2 is licensed under Boost Software License 1.0
**/
#ifndef QRYPTOPP_CIPHER_H
#define QRYPTOPP_CIPHER_H

#include <QStringList>

namespace QryptoPP
{

/// @header qryptokeymaker.h
class KeyMaker;

/**
 * @brief The Cipher class conforms to PKCS #5 PBES2
 * @ref https://tools.ietf.org/html/rfc2898#section-6.2
 */
class Cipher
{
    struct Private;
    Private *d;

public:
    enum Algorithm {
        AES,
        Blowfish,
        Camellia,
        DES_EDE3,
        IDEA,
        SEED,
        Serpent,
        Twofish,
        UnknownAlgorithm
    };

    enum Operation {
        CipherBlockChaining,
        CipherFeedback,
        Counter,
        ElectronicCodebook,
        OutputFeedback,
        UnknownOperation
    };

    static const QStringList AlgorithmNames;

    static const QStringList OperationCodes;

    /**
     * @brief Cipher default constructor
     * @param algorithm
     * @param operation
     * @param keyLength
     */
    Cipher(Algorithm algorithm = AES, Operation operation = Counter, uint keyLength = 16);

    Cipher(const Cipher &cipher);

    /**
     * @brief Cipher
     * @param algorithmName matches AlgorithmNames Caseinsensitively
     * @param operationCode matches OperationCodes Caseinsensitively
     * @param keyLength
     */
    Cipher(const QString &algorithmName, const QString &operationCode, uint keyLength);

    ~Cipher();

    Cipher &operator=(const Cipher &cipher);

    bool decrypt(QByteArray &plain, const QByteArray &crypt, const QByteArray &password);

    bool encrypt(QByteArray &crypt, const QByteArray &plain, const QByteArray &password);

    Algorithm algorithm() const;

    void setAlgorithm(Algorithm algorithm);

    QString algorithmName() const;

    void setAlgorithmName(const QString &algorithmName);

    /**
     * @brief initVector will be autogenerated to the cipher block size in encrypt if it was empty
     * @return
     */
    QByteArray initVector() const;

    void setInitVector(const QByteArray &initVector);

    void setInitVector(const QString &initVector)
    { setInitVector(QByteArray::fromHex(initVector.toLatin1())); }

    uint keyLength() const;

    void setKeyLength(uint keyLength);

    KeyMaker &keyMaker();

    Operation operation() const;

    void setOperation(Operation operation);

    QString operationCode() const;

    void setOperationCode(const QString &operationCode);

};

}

#endif // QRYPTOPP_CIPHER_H
