/* Qrypto 2016
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** Botan 1.11 is licensed under Simplified BSD License
** CryptoPP 5.6.2 is licensed under Boost Software License 1.0
**/
#ifndef QRYPTO_CIPHER_H
#define QRYPTO_CIPHER_H

#include "qrypto.h"

namespace Qrypto
{

/// @header qryptokeymaker.h
class KeyMaker;

/**
 * @brief The Cipher class conforms to PKCS #5 PBES2
 * @ref https://tools.ietf.org/html/rfc2898#section-6.2
 */
class Cipher
{
    struct Private;
    Private *d;

public:
    enum Algorithm {
        AES,
        Blowfish,
        CAST_128,
        Camellia,
        DES_EDE3,
        IDEA,
        SEED,
        Serpent,
        Twofish,
        UnknownAlgorithm
    };

    enum Operation {
        CBC,    // Cipher Block Chaining
        CFB,    // Cipher Feedback
        CTR,    // Counter
        ECB,    // Electronic Codebook
        EAX,    // Encrypt Authenticate Translate
        GCM,    // Galois Counter
        OFB,    // Output Feedback
        UnknownOperation
    };

    static const QStringList AlgorithmNames;

    static const QStringList OperationCodes;

    /**
     * @brief Cipher default constructor
     * @param algorithm
     * @param operation
     */
    Cipher(Algorithm algorithm = AES, Operation operation = GCM);

    Cipher(const Cipher &cipher);

    /**
     * @brief Cipher
     * @param algorithmName matches AlgorithmNames Caseinsensitively
     * @param operationCode matches OperationCodes Caseinsensitively
     */
    Cipher(const QString &algorithmName, const QString &operationCode);

    ~Cipher();

    Cipher &operator=(const Cipher &cipher);

    Error decrypt(SequreBytes &plain, const QByteArray &crypt, const KeyMaker &keyMaker);

    Error encrypt(QByteArray &crypt, const SequreBytes &plain, const KeyMaker &keyMaker);

    Algorithm algorithm() const;

    void setAlgorithm(Algorithm algorithm);

    QString algorithmName() const;

    void setAlgorithmName(const QString &algorithmName);

    /**
     * @brief authentication HMAC when not using authenticated Operation during encryption
     * @return
     */
    QByteArray authentication() const;

    /**
     * @brief setAuthentication
     * @param authentication HMAC for non-authenticated Operation
     */
    void setAuthentication(const QByteArray &authentication);

    void setAuthentication(const QString &authenticationHex)
    { setAuthentication(QByteArray::fromHex(authenticationHex.toLatin1())); }

    /**
     * @brief initialVector will always be autogenerated in encrypt
     * @return
     */
    QByteArray initialVector() const;

    void setInitialVector(const QByteArray &initialVector);

    void setInitialVector(const QString &initialVectorHex)
    { setInitialVector(QByteArray::fromHex(initialVectorHex.toLatin1())); }

    Operation operation() const;

    void setOperation(Operation operation);

    QString operationCode() const;

    void setOperationCode(const QString &operationCode);

    /**
     * @brief validateKeyLength
     * @param keyLength in bytes
     * @return a valid key length for current cipher
     */
    uint validateKeyLength(uint keyLength);

};

}

#endif // QRYPTO_CIPHER_H
