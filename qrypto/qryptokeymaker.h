/* QryptoPP 2016
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** CryptoPP 5.6.2 is licensed under Boost Software License 1.0
**/
#ifndef QRYPTOPP_KEYMAKER_H
#define QRYPTOPP_KEYMAKER_H

#include <QStringList>

namespace QryptoPP
{

/**
 * @brief The KeyMaker class conforms to PKCS #5 PBKDF2-HMAC
 * @ref https://tools.ietf.org/html/rfc2898#section-7.1
 */
class KeyMaker
{
    struct Private;
    Private *d;

public:
    enum Algorithm {
        RipeMD_160,
        RipeMD_320,
        Sha1,
        Sha224,
        Sha256,
        Sha384,
        Sha512,
        Sha3_224,
        Sha3_256,
        Sha3_384,
        Sha3_512,
        Whirlpool,
        UnknownAlgorithm
    };

    static const QStringList AlgorithmNames;

    /**
     * @brief KeyMaker default constructor
     * @param algorithm
     * @param iterationCount
     */
    KeyMaker(Algorithm algorithm = Sha1, uint iterationCount = 100000);

    KeyMaker(const KeyMaker &keyMaker);

    /**
     * @brief KeyMaker
     * @param algorithmName matches AlgorithmNames Caseinsensitively
     * @param iterationCount
     */
    KeyMaker(const QString &algorithmName, uint iterationCount);

    ~KeyMaker();

    KeyMaker &operator=(const KeyMaker &keyMaker);

    /**
     * @brief deriveKey
     * @param keyData can be either char* or uchar*
     * @param desiredKeyLength should be â‰¤ allocated keyData byte count
     * @param password should not be null
     * @return derived key length
     */
    uint deriveKey(void *keyData, uint desiredKeyLength, const QByteArray &password);

    Algorithm algorithm() const;

    void setAlgorithm(Algorithm algorithm);

    QString algorithmName() const;

    void setAlgorithmName(const QString &algorithmName);

    uint iterationCount() const;

    void setIterationCount(uint iterationCount);

    /**
     * @brief salt will be autogenerated to the hash digest size in deriveKey if it was empty
     * @return
     */
    QByteArray salt() const;

    /**
     * @brief setSalt would be used for decryption
     * @param salt
     */
    void setSalt(const QByteArray &salt);

    void setSalt(const QString &salt)
    { QByteArray::fromHex(salt.toLatin1()); }

};

}

#endif // QRYPTOPP_KEYMAKER_H
